# PHÂN TÍCH QUY TRÌNH NGHIỆP VỤ
## Website Thương Mại Điện Tử Fear Of God

---

## 1. QUY TRÌNH BÁM SÁT THỰC TẾ VỚI CODE KHÔNG?

### 1.1. Đánh giá tổng quan

Quy trình nghiệp vụ được mô tả trong Activity Diagram **BÁM SÁT CAO** với code thực tế của dự án. Dưới đây là phân tích chi tiết:

### 1.2. Quy trình Danh mục sản phẩm

**✅ Bám sát thực tế:**

- **API GET /**: Hiển thị toàn bộ danh sách sản phẩm
  - Code thực tế: `module.exports.index` trong `product.controller.js`
  - Truy vấn: `Products.find()` trả về tất cả sản phẩm

- **API GET /category/pagination**: Tìm kiếm, lọc, phân trang
  - Code thực tế: `module.exports.pagination` trong `product.controller.js`
  - Hỗ trợ: `page`, `count`, `search`, `category`
  - Logic lọc theo từ khóa: `value.name_product.toUpperCase().indexOf(keyWordSearch.toUpperCase())`

- **API GET /:id**: Xem chi tiết sản phẩm
  - Code thực tế: `module.exports.detail` trong `product.controller.js`
  - Truy vấn: `Products.findOne({ _id: id })`

- **Hiển thị thông tin**: Tên, giá, hình ảnh, tồn kho
  - Model `product.js` chứa các trường: `name_product`, `price_product`, `image`, `stock`

**🔍 Kết luận**: Quy trình này bám sát 100% với code thực tế.

---

### 1.3. Quy trình Giỏ hàng

**✅ Bám sát thực tế:**

- **Thêm vào giỏ hàng**: 
  - Sử dụng `localStorage` với key `"carts"`
  - Code: `localStorage.setItem('carts', JSON.stringify([]))`
  - Component: `CartsLocal.js` xử lý CRUD giỏ hàng

- **Cập nhật Redux State**:
  - Action: `changeCount()` trong `ActionCount.js`
  - Dispatch khi thêm/xóa/cập nhật giỏ hàng
  - Code: `dispatch(action_change_count)`

- **Hiển thị tóm tắt giỏ hàng**:
  - Component `Cart.jsx` hiển thị danh sách sản phẩm
  - Hàm `Sum_Price()` tính tổng tiền
  - Hỗ trợ áp dụng coupon (giảm giá)

- **Xóa sản phẩm**:
  - Hàm `handler_delete_carts(id_cart)`
  - Gọi `CartsLocal.deleteProduct(id_cart)`
  - Tự động cập nhật lại tổng tiền

**🔍 Kết luận**: Quy trình này bám sát 95% với code thực tế. 
- **Lưu ý**: Giỏ hàng được lưu ở localStorage (client-side), không có API lưu trên server.

---

### 1.4. Quy trình Bán hàng (Đặt hàng + Thanh toán)

**✅ Bám sát thực tế:**

- **Checkout Form**:
  - Component: `Checkout.jsx`
  - Form nhập: `fullname`, `phone`, `address`, `email`
  - State: `information` lưu trữ thông tin khách hàng

- **Tính phí vận chuyển**:
  - Component: `MapComponent.jsx` sử dụng Google Maps API
  - Tính khoảng cách và phí ship
  - Lưu vào `localStorage.setItem("price", shippingPrice)`

- **Chọn phương thức thanh toán**:
  - **PayPal**: Component `Paypal.jsx`
  - **MoMo**: Component `MoMo.jsx` 
    - API: `POST /momo` kiểm tra signature và xử lý callback
    - Code: `order.controller.js` - `module.exports.post_momo`
  - **COD**: Thanh toán khi nhận hàng (không cần xử lý online)

- **Tạo đơn hàng**:
  - API: `POST /order`
  - Code: `module.exports.post_order` trong `order.controller.js`
  - Tạo document trong collection `Order`

- **Tạo chi tiết đơn hàng**:
  - Model: `detail_order.js`
  - Lưu từng sản phẩm trong đơn với: `id_product`, `count`, `size`, `price`

- **Gửi email xác nhận**:
  - API: `POST /email`
  - Code: `module.exports.send_mail` trong `order.controller.js`
  - Sử dụng `mailer.js` với SMTP Gmail
  - Nội dung HTML chứa: bảng sản phẩm, tổng tiền, thông tin giao hàng

**🔍 Kết luận**: Quy trình này bám sát 98% với code thực tế.
- **Điểm mạnh**: Tích hợp đầy đủ PayPal, MoMo, Google Maps
- **Lưu ý**: Quản lý trạng thái đơn hàng được thực hiện thông qua Admin Dashboard

---

### 1.5. Quy trình Xác nhận Email

**✅ Bám sát thực tế:**

- **Lấy chi tiết đơn hàng**:
  - Code: `Detail_Order.find({ id_order: req.body.id_order }).populate('id_product')`
  - Populate để lấy thông tin đầy đủ của sản phẩm

- **Xây dựng HTML email**:
  - Template HTML: Bảng với cột (Tên, Hình ảnh, Giá, Số lượng, Size, Thành tiền)
  - Vòng lặp qua `carts` để tạo các hàng trong bảng
  - Thêm thông tin: Họ tên, SĐT, địa chỉ, phí ship, tổng thanh toán

- **Gửi email qua SMTP**:
  - File: `mailer.js`
  - Host: `smtp.gmail.com`, Port: `587`
  - Email: `truongphukiet1211@gmail.com`
  - Sử dụng App Password của Google (không dùng password thường)
  - Subject: "Hóa Đơn Đặt Hàng"

- **Khách hàng nhận email**:
  - Email chứa đầy đủ thông tin đơn hàng
  - Có thể dùng làm biên lai điện tử

**🔍 Kết luận**: Quy trình này bám sát 100% với code thực tế.

---

## 2. QUY TRÌNH MUA - BÁN TRÊN WEBSITE THƯƠNG MẠI ĐIỆN TỬ, NẾU TÁCH NHỎ RA, THÌ CÓ VẤN ĐỀ PHỐI HỢP KHÔNG NẾU TÁCH CÁC QUY TRÌNH: ĐơN HÀNG, THANH TOÁN, QUẢN LÝ ĐƠN?

### 2.1. Phân tích kiến trúc hiện tại

Trong dự án này, các quy trình đã được **TÁCH BIỆT RÕ RÀNG** thành các module độc lập:

#### 2.1.1. Module Đơn hàng (Order)
- **Model**: `order.js`
- **Router**: `order.router.js`
- **Controller**: `order.controller.js`
- **API**:
  - `GET /order/:id` - Lấy danh sách đơn hàng của user
  - `GET /order/detail/:id` - Lấy chi tiết 1 đơn hàng
  - `POST /order` - Tạo đơn hàng mới

#### 2.1.2. Module Chi tiết đơn hàng (Detail Order)
- **Model**: `detail_order.js`
- **Router**: `detail_order.router.js`
- **Controller**: `detail_order.controller.js`
- **Chức năng**: Lưu trữ từng sản phẩm trong đơn hàng

#### 2.1.3. Module Thanh toán (Payment)
- **Model**: `payment.js`
- **API trong Order Controller**:
  - `POST /momo` - Xử lý callback từ MoMo
  - PayPal được xử lý ở client-side (Paypal.jsx)
- **Phương thức**: PayPal, MoMo, COD

#### 2.1.4. Module Giao hàng (Delivery)
- **Model**: `delivery.js`
- **Router**: `delivery.router.js`
- **Controller**: `delivery.controller.js`
- **Chức năng**: Quản lý thông tin giao hàng, phí vận chuyển

---

### 2.2. Các vấn đề phối hợp có thể xảy ra

#### ⚠️ Vấn đề 1: Đồng bộ dữ liệu giữa các module

**Tình huống**:
- Khi tạo đơn hàng (Order), cần đồng thời tạo:
  - Chi tiết đơn hàng (Detail_Order)
  - Thông tin thanh toán (Payment)
  - Thông tin giao hàng (Delivery)

**Giải pháp trong code hiện tại**:
```javascript
// Tạo đơn hàng
const order = await Order.create(req.body)

// Tạo chi tiết đơn hàng (thực hiện riêng)
// Gửi email xác nhận
await mailer.sendMail(...)
```

**Vấn đề**: 
- Nếu tạo Order thành công nhưng tạo Detail_Order thất bại → **Dữ liệu không đồng bộ**
- Không có **transaction** để đảm bảo tính toàn vẹn dữ liệu

**⚡ Khuyến nghị**: Sử dụng MongoDB Transaction để đảm bảo tất cả các bước đều thành công hoặc rollback.

---

#### ⚠️ Vấn đề 2: Xử lý thanh toán bất đồng bộ

**Tình huống**:
- Thanh toán PayPal/MoMo có thể mất vài giây
- Trong thời gian chờ, khách hàng có thể:
  - Đóng trình duyệt
  - Mất kết nối mạng
  - Refresh trang

**Giải pháp trong code hiện tại**:
- MoMo có callback API: `POST /momo` để nhận kết quả thanh toán
- Kiểm tra `signature` để xác thực request từ MoMo
- Cập nhật trạng thái đơn hàng dựa trên `errorCode`

**Vấn đề**:
- Nếu callback từ MoMo bị delay hoặc fail → Trạng thái đơn hàng không được cập nhật
- PayPal được xử lý ở client-side → Dễ bị giả mạo

**⚡ Khuyến nghị**: 
- Lưu trạng thái thanh toán trung gian: "PENDING", "PROCESSING", "COMPLETED", "FAILED"
- Implement webhook từ PayPal để nhận kết quả thanh toán chính xác

---

#### ⚠️ Vấn đề 3: Quản lý trạng thái đơn hàng

**Tình huống**:
- Đơn hàng có nhiều trạng thái: Chờ xử lý → Đang giao → Hoàn thành → Hủy
- Admin cần cập nhật trạng thái từ Admin Dashboard
- Customer cần theo dõi trạng thái real-time

**Giải pháp trong code hiện tại**:
- Dự án có sử dụng **Socket.io**:
  ```javascript
  const socket = io('http://localhost:8000', {
      transports: ['websocket'], jsonp: false
  });
  ```
- Cho phép cập nhật real-time

**Vấn đề**:
- Không rõ flow cập nhật trạng thái từ Admin → Customer
- Nếu tách module Quản lý đơn hàng riêng → Cần đảm bảo WebSocket hoạt động xuyên suốt

**⚡ Khuyến nghị**: 
- Sử dụng Event-Driven Architecture
- Khi Admin cập nhật trạng thái → Emit event qua Socket.io → Client nhận và cập nhật UI

---

#### ⚠️ Vấn đề 4: Rollback khi thanh toán thất bại

**Tình huống**:
- Khách hàng đặt hàng thành công
- Thanh toán PayPal/MoMo thất bại
- Cần **hủy đơn hàng** và **hoàn trả stock** sản phẩm

**Giải pháp trong code hiện tại**:
- Không thấy logic kiểm tra và trừ stock
- Không có cơ chế rollback tự động

**⚡ Khuyến nghị**: 
- Implement check stock trước khi thanh toán
- Nếu thanh toán thất bại → Tự động hủy đơn và trả lại stock
- Sử dụng MongoDB Transaction để đảm bảo atomic operation

---

### 2.3. Lợi ích khi tách các quy trình

#### ✅ Ưu điểm:

1. **Dễ bảo trì**: Mỗi module có trách nhiệm riêng biệt
2. **Dễ mở rộng**: Thêm phương thức thanh toán mới không ảnh hưởng module khác
3. **Dễ test**: Test từng module độc lập
4. **Phân quyền rõ ràng**: Admin chỉ quản lý đơn hàng, không can thiệp thanh toán
5. **Scalability**: Có thể scale từng service riêng nếu cần (Microservices)

#### ❌ Nhược điểm:

1. **Phức tạp hơn**: Cần đảm bảo đồng bộ dữ liệu giữa các module
2. **Performance**: Nhiều API call hơn
3. **Error handling**: Phải xử lý lỗi ở nhiều tầng
4. **Transaction management**: Cần đảm bảo tính toàn vẹn dữ liệu

---

### 2.4. Kết luận

**Có vấn đề phối hợp không?**

→ **CÓ**, nhưng có thể giải quyết được nếu:

1. ✅ Sử dụng **MongoDB Transaction** cho các thao tác liên quan nhiều collection
2. ✅ Implement **State Machine** cho trạng thái đơn hàng
3. ✅ Sử dụng **Event-Driven Architecture** với Socket.io hoặc Message Queue
4. ✅ Implement **Webhook** cho các payment gateway (PayPal, MoMo)
5. ✅ Thêm **Retry mechanism** cho các API call thất bại
6. ✅ Logging đầy đủ để debug khi có lỗi

**Đánh giá code hiện tại**:
- ⭐⭐⭐⭐☆ (4/5): Code đã tách module tốt, nhưng cần cải thiện về transaction và error handling

---

## PHỤ LỤC: DANH SÁCH API

### Product APIs
- `GET /` - Lấy tất cả sản phẩm
- `GET /category` - Lấy sản phẩm theo danh mục
- `GET /:id` - Lấy chi tiết sản phẩm
- `GET /category/gender` - Lọc theo giới tính
- `GET /category/pagination` - Phân trang và tìm kiếm
- `GET /scoll/page` - Scroll pagination

### Order APIs
- `GET /order/:id` - Lấy đơn hàng của user
- `GET /order/detail/:id` - Lấy chi tiết đơn hàng
- `POST /order` - Tạo đơn hàng
- `POST /momo` - Callback từ MoMo
- `POST /email` - Gửi email xác nhận

### Models
- `product.js` - Sản phẩm
- `order.js` - Đơn hàng
- `detail_order.js` - Chi tiết đơn hàng
- `payment.js` - Thanh toán
- `delivery.js` - Giao hàng
- `cart.js` - Giỏ hàng
- `user.js` - Người dùng
- `coupon.js` - Mã giảm giá

---

**Người thực hiện**: [Tên sinh viên]  
**Ngày**: 15/10/2025  
**Lớp**: [Mã lớp]  
**Môn học**: Kỹ thuật phần mềm
